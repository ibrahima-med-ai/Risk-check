import gradio as gr
import os
from fastapi import FastAPI
from starlette.staticfiles import StaticFiles

# Texte de connaissances nutritionnelles int√©gr√©es (inchang√©)
document_connaissances = """
Nutrition et sant√© :

1. Le besoin calorique journalier d√©pend de plusieurs facteurs : √¢ge, sexe, poids, taille, niveau d'activit√© physique.
2. La formule de Mifflin-St Jeor est une m√©thode reconnue pour estimer le m√©tabolisme de base (BMR).
3. Le total des d√©penses √©nerg√©tiques journali√®res (TDEE) est le BMR multipli√© par un facteur d'activit√©.
4. Pour perdre du poids, un d√©ficit calorique d'environ 500 kcal/jour est recommand√©.
5. Pour gagner du poids, un surplus calorique d'environ 500 kcal/jour avec entra√Ænement de musculation est efficace.
6. Une alimentation √©quilibr√©e doit contenir prot√©ines, glucides, lipides, fibres, vitamines et min√©raux.
7. L‚Äôhydratation est essentielle au bon fonctionnement du m√©tabolisme.
8. L‚Äôactivit√© physique r√©guli√®re am√©liore la composition corporelle et la sant√© cardiovasculaire.
9. Les r√©gimes drastiques ou d√©s√©quilibr√©s sont √† √©viter pour pr√©server la sant√©.
10. Les besoins nutritionnels peuvent varier en fonction de pathologies, grossesse, etc.
"""

def assistant_ia(prompt):
    prompt_lower = prompt.lower()
    if "calorie" in prompt_lower or "besoin √©nerg√©tique" in prompt_lower:
        return ("Le besoin calorique journalier d√©pend de votre √¢ge, sexe, poids, taille et activit√© physique.\n"
                "On utilise souvent la formule de Mifflin-St Jeor pour estimer le m√©tabolisme de base (BMR), "
                "puis on ajuste selon le niveau d‚Äôactivit√© pour obtenir le total des d√©penses √©nerg√©tiques (TDEE).")
    elif "perdre du poids" in prompt_lower:
        return ("Pour perdre du poids, il est recommand√© de cr√©er un d√©ficit calorique d'environ 500 kcal par jour, "
                "accompagn√© d'une activit√© physique r√©guli√®re, notamment du cardio.")
    elif "gagner du poids" in prompt_lower or "prise de masse" in prompt_lower:
        return ("Pour gagner du poids, un surplus calorique d'environ 500 kcal par jour est conseill√©, "
                "associ√© √† un entra√Ænement de musculation pour favoriser la prise de masse musculaire.")
    elif "alimentation √©quilibr√©e" in prompt_lower or "nutrition" in prompt_lower:
        return ("Une alimentation √©quilibr√©e comprend des prot√©ines, glucides, lipides, fibres, vitamines et min√©raux. "
                "Il est important de privil√©gier des aliments vari√©s et non transform√©s.")
    else:
        return "Voici quelques informations g√©n√©rales sur la nutrition:\n\n" + document_connaissances

def calc_bmr(weight, height, age, gender):
    if gender == "Homme":
        return 10 * weight + 6.25 * height - 5 * age + 5
    else:
        return 10 * weight + 6.25 * height - 5 * age - 161

def calc_tdee(bmr, activity_level):
    levels = {
        "S√©dentaire (peu ou pas d'exercice)": 1.2,
        "L√©g√®rement actif (1-3 jours/semaine)": 1.375,
        "Mod√©r√©ment actif (3-5 jours/semaine)": 1.55,
        "Tr√®s actif (6-7 jours/semaine)": 1.725,
        "Extr√™mement actif": 1.9
    }
    return bmr * levels.get(activity_level, 1.2)

def recommandations(weight, height, age, gender, activity, goal):
    bmr = calc_bmr(weight, height, age, gender)
    tdee = round(calc_tdee(bmr, activity))
    cal = tdee
    if goal == "Perdre du poids":
        cal -= 500
        sport = "45 min de cardio 5x/semaine"
        menu = "Avoine, poulet, l√©gumes, soupes l√©g√®res."
    elif goal == "Gagner du poids":
        cal += 500
        sport = "Musculation + surplus calorique"
        menu = "≈íufs, riz complet, smoothie prot√©in√©."
    else:
        sport = "Activit√© mod√©r√©e r√©guli√®re"
        menu = "R√©gime √©quilibr√© avec vari√©t√© d'aliments."
    return f"{cal} kcal/jour", sport, menu

# ------------------- Interface Gradio --------------------

BANNER_URL = "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80"

with gr.Blocks(theme=gr.themes.Base()) as gradio_app:
    with gr.Tabs():
        with gr.TabItem("üè† Accueil"):
            gr.Image(value=BANNER_URL, show_label=False, interactive=False)
            gr.Markdown("üöÄ **SanatioTech : La R√©volution Technologique pour une Sant√© Plus Intelligente !**\n\n[...]")

        with gr.TabItem("üìä NutriTech"):
            with gr.Tabs():
                with gr.TabItem("üìÖ Pr√©sentation"):
                    gr.Markdown("üåø **NutriTech üß† ‚Äì L‚Äôintelligence de la nutrition au service de votre sant√©**\n\n[...]")
                with gr.TabItem("üî¢ Calcul & conseils"):
                    with gr.Row():
                        with gr.Column():
                            w = gr.Slider(30, 200, value=70, label="Poids (kg)")
                            h = gr.Slider(100, 220, value=170, label="Taille (cm)")
                            a = gr.Slider(10, 100, value=25, label="√Çge")
                            g = gr.Radio(["Homme", "Femme"], label="Sexe")
                            act = gr.Dropdown(label="Activit√©", choices=[
                                "S√©dentaire (peu ou pas d'exercice)",
                                "L√©g√®rement actif (1-3 jours/semaine)",
                                "Mod√©r√©ment actif (3-5 jours/semaine)",
                                "Tr√®s actif (6-7 jours/semaine)",
                                "Extr√™mement actif"
                            ])
                            obj = gr.Radio(["Perdre du poids", "Maintenir le poids", "Gagner du poids"], label="Objectif")
                            btn = gr.Button("Calculer")
                        with gr.Column():
                            out1 = gr.Textbox(label="Calories (kcal/jour)")
                            out2 = gr.Textbox(label="Sport conseill√©")
                            out3 = gr.Textbox(label="Menu conseill√©", lines=6)
                    btn.click(recommandations, inputs=[w, h, a, g, act, obj], outputs=[out1, out2, out3])
                with gr.TabItem("üß† Assistant IA"):
                    prompt = gr.Textbox(label="Posez votre question nutritionnelle")
                    rep = gr.Textbox(label="R√©ponse de l'IA", lines=8)
                    gr.Button("Envoyer").click(assistant_ia, inputs=prompt, outputs=rep)
                with gr.TabItem("üöÄ √Ä venir"):
                    gr.Markdown("### Prochaines fonctionnalit√©s NutriTech\n- Suivi glyc√©mique\n- Dashboard interactif\n[...]")

        with gr.TabItem("üöÄ Autres projets"):
            gr.Markdown("### Projets IA sant√© √† venir sur SanatioTech\n- CardioPredict\n- SleepOptima\n[...]")

# ------------------- Int√©gration FastAPI --------------------

from fastapi import FastAPI
from starlette.staticfiles import StaticFiles

app = FastAPI()

# Sert le fichier de v√©rification Google plac√© dans ./public/
app.mount("/", StaticFiles(directory="public", html=True), name="static")

# Sert l'interface Gradio sur /app
app = gr.mount_gradio_app(app, gradio_app, path="/app")

