import gradio as gr
import os
import datetime
import json
from pathlib import Path

# ---------------------- Base de connaissances ----------------------
document_connaissances = """
Nutrition et sant√© :

1. Le besoin calorique journalier d√©pend de plusieurs facteurs : √¢ge, sexe, poids, taille, niveau d'activit√© physique.
2. La formule de Mifflin-St Jeor est une m√©thode reconnue pour estimer le m√©tabolisme de base (BMR).
3. Le total des d√©penses √©nerg√©tiques journali√®res (TDEE) est le BMR multipli√© par un facteur d'activit√©.
4. Pour perdre du poids, un d√©ficit calorique d'environ 500 kcal/jour est recommand√©.
5. Pour gagner du poids, un surplus calorique d'environ 500 kcal/jour avec entra√Ænement de musculation est efficace.
6. Une alimentation √©quilibr√©e doit contenir prot√©ines, glucides, lipides, fibres, vitamines et min√©raux.
7. L‚Äôhydratation est essentielle au bon fonctionnement du m√©tabolisme.
8. L‚Äôactivit√© physique r√©guli√®re am√©liore la composition corporelle et la sant√© cardiovasculaire.
9. Les r√©gimes drastiques ou d√©s√©quilibr√©s sont √† √©viter pour pr√©server la sant√©.
10. Les besoins nutritionnels peuvent varier en fonction de pathologies, grossesse, etc.
"""

# ---------------------- IA Nutritionnelle ----------------------
def assistant_ia(prompt):
    prompt_lower = prompt.lower()
    if "calorie" in prompt_lower or "besoin √©nerg√©tique" in prompt_lower:
        return ("Le besoin calorique journalier d√©pend de votre √¢ge, sexe, poids, taille et activit√© physique.\n"
                "On utilise souvent la formule de Mifflin-St Jeor pour estimer le m√©tabolisme de base (BMR), puis on ajuste selon le niveau d‚Äôactivit√© pour obtenir le total des d√©penses √©nerg√©tiques (TDEE).")
    elif "perdre du poids" in prompt_lower:
        return ("Pour perdre du poids, il est recommand√© de cr√©er un d√©ficit calorique d'environ 500 kcal par jour, accompagn√© d'une activit√© physique r√©guli√®re, notamment du cardio.")
    elif "gagner du poids" in prompt_lower or "prise de masse" in prompt_lower:
        return ("Pour gagner du poids, un surplus calorique d'environ 500 kcal par jour est conseill√©, associ√© √† un entra√Ænement de musculation pour favoriser la prise de masse musculaire.")
    elif "tension" in prompt_lower:
        return ("Une bonne tension art√©rielle se maintient gr√¢ce √† une alimentation pauvre en sel, la gestion du stress, une activit√© physique r√©guli√®re, et un suivi m√©dical. Valeurs id√©ales : entre 90/60 et 120/80 mmHg.")
    elif "glyc√©mie" in prompt_lower or "diab√®te" in prompt_lower:
        return ("Surveillez votre glyc√©mie r√©guli√®rement, suivez un r√©gime √† index glyc√©mique bas et √©vitez les sucres rapides. Glyc√©mie √† jeun id√©ale : 0,70 √† 1,00 g/L.")
    elif "alimentation √©quilibr√©e" in prompt_lower or "nutrition" in prompt_lower:
        return ("Une alimentation √©quilibr√©e comprend des prot√©ines, glucides, lipides, fibres, vitamines et min√©raux. Il est important de privil√©gier des aliments vari√©s et non transform√©s.")
    else:
        return "Voici quelques informations g√©n√©rales sur la nutrition :\n\n" + document_connaissances

# ---------------------- Calculs caloriques ----------------------
def calc_bmr(weight, height, age, gender):
    if gender == "Homme":
        return 10 * weight + 6.25 * height - 5 * age + 5
    else:
        return 10 * weight + 6.25 * height - 5 * age - 161

def calc_tdee(bmr, activity_level):
    levels = {
        "S√©dentaire (peu ou pas d'exercice)": 1.2,
        "L√©g√®rement actif (1-3 jours/semaine)": 1.375,
        "Mod√©r√©ment actif (3-5 jours/semaine)": 1.55,
        "Tr√®s actif (6-7 jours/semaine)": 1.725,
        "Extr√™mement actif": 1.9
    }
    return bmr * levels.get(activity_level, 1.2)

def recommandations(weight, height, age, gender, activity, goal):
    bmr = calc_bmr(weight, height, age, gender)
    tdee = round(calc_tdee(bmr, activity))
    cal = tdee
    if goal == "Perdre du poids":
        cal -= 500
        sport = "45 min de cardio 5x/semaine"
        menu = "Avoine, poulet, l√©gumes, soupes l√©g√®res."
    elif goal == "Gagner du poids":
        cal += 500
        sport = "Musculation + surplus calorique"
        menu = "≈íufs, riz complet, smoothie prot√©in√©."
    else:
        sport = "Activit√© mod√©r√©e r√©guli√®re"
        menu = "R√©gime √©quilibr√© avec vari√©t√© d'aliments."
    save_history({"calories": cal, "sport": sport, "menu": menu, "date": str(datetime.datetime.now())})
    return f"{cal} kcal/jour", sport, menu

# ---------------------- Historique ----------------------
history_path = Path("history.json")
def load_history():
    if history_path.exists():
        with open(history_path, "r") as f:
            return json.load(f)
    return []

def save_history(entry):
    data = load_history()
    data.append(entry)
    with open(history_path, "w") as f:
        json.dump(data[-50:], f, indent=2)

# ---------------------- Interface Gradio ----------------------
with gr.Blocks(theme=gr.themes.Soft()) as app:
    with gr.Tabs():

        with gr.TabItem("üè† Accueil"):
            gr.Markdown("""
üöÄ **SanatioTech : La R√©volution Technologique pour une Sant√© Plus Intelligente !**

Bienvenue chez SanatioTech üåü ‚Äì o√π l‚Äôinnovation rencontre les soins de sant√© pour cr√©er un avenir plus s√ªr, plus connect√© et plus humain.

üí° **Pourquoi SanatioTech ?**

Nous repoussons les limites de la m√©decine gr√¢ce √† des solutions high-tech intelligentes, con√ßues pour les professionnels exigeants comme pour les patients √©clair√©s. Notre mission ? Vous offrir des outils qui anticipent, simplifient et am√©liorent votre quotidien.

‚ú® **Nos Atouts Incontournables**

üîπ Innovation de Pointe : IA m√©dicale, diagnostics assist√©s, gestion optimis√©e des donn√©es‚Ä¶ La sant√© de demain, aujourd‚Äôhui.  
üîπ S√©curit√© Impeccable üîí : Vos donn√©es sont prot√©g√©es avec des protocoles ultra-s√©curis√©s, conformes aux normes internationales.  
üîπ Simplicit√© d‚ÄôUsage : Des interfaces intuitives pour une prise en main imm√©diate, sans compromis sur la performance.  
üîπ Impact R√©el : Des solutions qui am√©liorent concr√®tement les r√©sultats m√©dicaux et le confort des patients.

üåç **Rejoignez la R√©volution SanatioTech !**

Que vous soyez m√©decin, √©tablissement de sant√©, ou particulier, nos technologies sur-mesure vous accompagnent pour une sant√© plus pr√©cise, proactive et personnalis√©e.

üëâ D√©couvrez nos solutions et transformez votre approche des soins !

#Sant√©Connect√©e #InnovationM√©dicale #FuturDeLaSant√©
            """)

        with gr.TabItem("üìä NutriTech"):
            with gr.Tabs():
                with gr.TabItem("üî¢ Calcul & conseils"):
                    with gr.Row():
                        with gr.Column():
                            w = gr.Slider(30, 200, value=70, label="Poids (kg)")
                            h = gr.Slider(100, 220, value=170, label="Taille (cm)")
                            a = gr.Slider(10, 100, value=25, label="√Çge")
                            g = gr.Radio(["Homme", "Femme"], label="Sexe")
                            act = gr.Dropdown(label="Activit√©", choices=[
                                "S√©dentaire (peu ou pas d'exercice)",
                                "L√©g√®rement actif (1-3 jours/semaine)",
                                "Mod√©r√©ment actif (3-5 jours/semaine)",
                                "Tr√®s actif (6-7 jours/semaine)",
                                "Extr√™mement actif"
                            ])
                            obj = gr.Radio(["Perdre du poids", "Maintenir le poids", "Gagner du poids"], label="Objectif")
                            btn = gr.Button("Calculer")
                        with gr.Column():
                            out1 = gr.Textbox(label="Calories (kcal/jour)")
                            out2 = gr.Textbox(label="Sport conseill√©")
                            out3 = gr.Textbox(label="Menu conseill√©", lines=6)
                    btn.click(recommandations, inputs=[w, h, a, g, act, obj], outputs=[out1, out2, out3])

                with gr.TabItem("üìà Historique"):
                    hist_btn = gr.Button("Afficher l'historique")
                    hist_out = gr.Textbox(label="Derniers calculs", lines=12)
                    def show_history():
                        data = load_history()
                        return "\n\n".join([f"{h['date']} : {h['calories']} kcal | {h['sport']} | {h['menu']}" for h in data[-10:]])
                    hist_btn.click(show_history, outputs=hist_out)

                with gr.TabItem("üß† Assistant IA"):
                    prompt = gr.Textbox(label="Posez votre question nutritionnelle")
                    rep = gr.Textbox(label="R√©ponse de l'IA", lines=8)
                    gr.Button("Envoyer").click(assistant_ia, inputs=prompt, outputs=rep)

                with gr.TabItem("üìÖ Pr√©sentation"):
                    gr.Markdown("""
üåø **NutriTech üß† ‚Äì L‚Äôintelligence de la nutrition au service de votre sant√©**

NutriTech est une application web innovante d‚Äôintelligence artificielle nutritionnelle, con√ßue pour aider chaque individu √† mieux comprendre son corps, ses besoins caloriques et √† recevoir des conseils personnalis√©s pour am√©liorer son mode de vie.

üöÄ **Fonctionnalit√©s principales**  
‚ú® Calcul intelligent des besoins caloriques journaliers  
üéØ Bas√© sur la formule Mifflin-St Jeor, adapt√©e pour les hommes et les femmes  

ü•ó **Conseils nutritionnels personnalis√©s**  
En fonction de vos objectifs :  
‚úÖ Perte de poids  
üí™ Prise de masse  
‚öñÔ∏è Maintien de forme  

üß™ **Analyse des facteurs de mode de vie**  
‚úì Activit√© physique  
‚úì Objectif sant√©  

üß¨ **Technologies utilis√©es**  
Python + scikit-learn pour les calculs et l‚ÄôIA  
Gradio pour une interface interactive simple et intuitive  
Google Colab pour l‚Äôh√©bergement temporaire  
Pr√©paration future du d√©ploiement avec Flask + Render ou HuggingFace Spaces  

üéØ **Objectif du projet**  
NutriTech a √©t√© d√©velopp√© dans le cadre d‚Äôun projet personnel visant √† :  
üåç Rendre la nutrition accessible et compr√©hensible √† tous  
ü§ñ Montrer comment l‚ÄôIA peut √©duquer et pr√©venir les maladies  
üöÄ Construire une preuve de concept solide pour un futur produit de sant√© num√©rique √† impact  

üë§ **Auteur**  
Ibrahima Diallo  
Lyc√©en passionn√© d‚Äôintelligence artificielle m√©dicale & de sant√© pr√©ventive  
üìß ibbidiallo7@gmail.com üåê GitHub : ibrahima-med-ai
                    """)

port = int(os.environ.get("PORT", 7860))
app.launch(server_name="0.0.0.0", server_port=port)

